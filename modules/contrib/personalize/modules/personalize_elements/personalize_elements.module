<?php

/**
 * @file personalize_elements.module
 * Provides an option set plugin for personalizing ALL THE THINGS.
 */

define('PERSONALIZE_ELEMENTS_HELP_URL_SELECTOR', 'https://docs.acquia.com/lift/personalize/element#selector');

/**
 * Implements hook_menu().
 */
function personalize_elements_menu() {
  $items['admin/structure/personalize-elements'] = array(
    'title' => 'Personalize elements',
    'description' => 'Manage your personalized elements',
    'page callback' => 'personalize_elements_list',
    'access arguments' => array('manage personalized content'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'personalize_elements.admin.inc',
  );
  $items['admin/structure/personalize-elements/add'] = array(
    'title' => 'Add personalized element',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('personalize_elements_form', 'add'),
    'access arguments' => array('manage personalized content'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'personalize_elements.admin.inc',
  );
  $items['admin/structure/personalize/variations/personalize-elements/add'] = array(
    'title' => 'Add personalized element',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('personalize_elements_form', 'add'),
    'access arguments' => array('manage personalized content'),
    'type' => MENU_CALLBACK,
    'file' => 'personalize_elements.admin.inc',
  );
  $items['admin/structure/personalize/variations/personalize-elements/manage/%personalize_element'] = array(
    'title' => 'Edit Personalized Element',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('personalize_elements_form', FALSE, 6),
    'access arguments' => array('manage personalized content'),
    'file' => 'personalize_elements.admin.inc',
  );
  $items['admin/structure/personalize/variations/personalize-elements/manage/%personalize_element/edit'] = array(
    'title' => 'Edit Personalized Element',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );
  $items['admin/structure/personalize/variations/personalize-elements/manage/%personalize_element/delete'] = array(
    'title' => 'Delete Personalized Element',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('personalize_elements_element_delete', 6),
    'access arguments' => array('manage personalized content'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'personalize_elements.admin.inc',
  );
  $items['admin/structure/personalize/variations/personalize-elements/manage/%personalize_element/%/delete'] = array(
    'title' => 'Delete Personalized Element Variation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('personalize_elements_option_delete', 6, 7),
    'access arguments' => array('manage personalized content'),
    'type' => MENU_CALLBACK,
    'file' => 'personalize_elements.admin.inc',
  );
  $items['admin/config/content/personalize/personalize-elements'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Personalize Elements',
    'description' => 'Configuration settings for Personalize Elements module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('personalize_elements_configuration_form'),
    'access arguments' => array('use advanced personalize elements features'),
    'file' => 'personalize_elements.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function personalize_elements_permission() {
  $permissions = array(
    'use advanced personalize elements features' => array(
      'title' => t('Use advanced Personalize Elements features'),
      'description' => t('Includes permission to write JavaScript to be executed for content variations and modifying the set of allowed HTML tags.'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}

/**
 * Implements hook_personalize_option_set_type().
 */
function personalize_elements_personalize_option_set_type() {
  return array(
    'elements' => array()
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function personalize_elements_ctools_plugin_api($owner, $api) {
  if ($owner == 'personalize' && $api == 'personalize') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_page_build().
 */
function personalize_elements_page_build(&$page) {
  $option_sets = personalize_option_set_load_by_type('elements', 'label');
  $settings = array();
  if (user_access('manage personalized content')) {
    $settings['contextualVariationTypes'] = personalize_elements_contextual_menu_variations();
  }
  personalize_elements_limit_option_sets_by_path($option_sets);
  $elements = personalize_elements_element_settings($option_sets);
  if (!empty($elements)) {
    $settings['elements'] = $elements;
  }
  $page['page_top']['personalize_elements'] = array(
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'personalize_elements') . '/js/personalize_elements.js' => array(),
        array(
          'data' => array(
            'personalize_elements' => $settings,
          ),
          'type' => 'setting'
        ),
      ),
    )
  );
  foreach ($option_sets as $option_set) {
    personalize_element_with_option_set($page['page_top']['personalize_elements'], $option_set);
  }
}

/**
 * Helper function to generate the Drupal settings elements for option sets.
 *
 * @param array $option_sets
 *   An array of option sets to get personalize_elements settings for.
 * @return array
 *   An array element element settings keyed by JS osid with:
 *   - selector: the jQuery selector
 *   - variation_type: the type of personalize_elements variation
 *   - previewable: boolean indicating if this element can be previewed.
 */
function personalize_elements_element_settings($option_sets) {
  $elements = array();
  foreach ($option_sets as $osid => $option_set) {
    $js_id = $js_id = personalize_stringify_osid($option_set->osid);
    $elements[$js_id] = array(
      'selector' => $option_set->data['personalize_elements_selector'],
      'variation_type' => $option_set->data['personalize_elements_type'],
      // The 'runJS' variation type cannot be previewed in the normal way.
      'previewable' => $option_set->data['personalize_elements_type'] !== 'runJS',
    );
  }
  return $elements;
}

/**
 * Helper function to limit personalize option sets to those applicable to a
 * particular path.
 *
 * @param array &$option_sets
 *   An array of option sets to limit by reference.
 * @param string $path
 *   An optional path to match for limited option sets.  If empty then the
 *   current path will be used.
 */
function personalize_elements_limit_option_sets_by_path(&$option_sets, $path = NULL) {
  foreach ($option_sets as $osid => $option_set) {
    $page_match = TRUE;
    if (isset($option_set->data['pages']) && !empty($option_set->data['pages'])) {
      $page_match = visitor_actions_match_page($option_set->data['pages'], $path);
    }
    if (!$page_match) {
      unset($option_sets[$osid]);
      continue;
    }
  }
}

/**
 * Implements hook_personalize_element_load().
 */
function personalize_elements_personalize_option_set_load($option_sets) {
  foreach ($option_sets as $option_set) {
    if ($option_set->plugin == 'elements') {
      // Rendered Option Sets are usually in a div with an id of #personalize-osid-123
      // but for arbitrary elements on the page, the selector is just what was
      // specified when the Option Set was configured.
      $option_set->selector = $option_set->data['personalize_elements_selector'];
    }
  }
}

/**
 * Implements hook_personalize_create_new_links().
 */
function personalize_elements_personalize_create_new_links() {
  return array(
    array(
      'title' => 'Personalized Element',
      'path' => 'admin/structure/personalize/variations/personalize-elements/add',
    ),
  );
}

/**
 * Implements hook_personalize_edit_link().
 */
function personalize_elements_personalize_edit_link($option_set) {
  if ($option_set->plugin != 'elements') {
    return '';
  }
  return "admin/structure/personalize/variations/personalize-elements/manage/{$option_set->osid}/edit";
}

/**
 * Implements hook_personalize_delete_link().
 */
function personalize_elements_personalize_delete_link($option_set) {
  if ($option_set->plugin != 'elements') {
    return '';
  }
  return "admin/structure/personalize/variations/personalize-elements/manage/{$option_set->osid}/delete";
}

/**
 * Implements hook_personalize_elements_variation_types().
 */
function personalize_elements_personalize_elements_variation_types($filter_by_perms = TRUE, $filter_active = TRUE) {
  $types = array();
  if (!$filter_active) {
    // Retired in favor of editHtml below.
    $types['replaceHtml'] = array(
      'label' => t('Replace the html'),
      'needs_selector' => TRUE,
      'active' => FALSE,
      'contextual' => array(
        'label' => t('Edit HTML'),
        'formitem' => array(
          '#type' => 'textarea',
          '#title' => t('HTML'),
          '#rows' => 4,
          '#required' => TRUE,
        ),
      ),
    );
  }
  $types['editText'] = array(
    'label' => t('Edit the text'),
    'needs_selector' => TRUE,
    'active' => TRUE,
    'contextual' => array(
      'label' => t('Edit text'),
      'formitem' => array(
        '#type' => 'textarea',
        '#title' => t('Text'),
        '#rows' => 6,
        '#required' => TRUE,
      ),
    ),
    // Limits this option to selectors that only have children with the nodeType
    // of 3 (text).
    'limitByChildrenType' => '3',
  );
  $types['editHtml'] = array(
    'label' => t('Edit the html'),
    'needs_selector' => TRUE,
    'active' => TRUE,
    'contextual' => array(
      'label' => t('Edit HTML'),
      'formitem' => array(
        '#type' => 'textarea',
        '#title' => t('HTML'),
        '#rows' => 6,
        '#required' => TRUE,
      ),
    ),
  );
  $types['addClass'] = array(
    'label' => t('Add a class'),
    'needs_selector' => TRUE,
    'active' => TRUE,
    'contextual' => array(
      'label' => t('Add CSS class'),
      'formitem' => array(
        '#type' => 'textfield',
        '#title' => t('New class'),
        '#required' => TRUE,
      ),
    ),
  );
  $types['appendHtml'] = array(
    'label' => t('Append HTML'),
    'needs_selector' => TRUE,
    'active' => TRUE,
    'contextual' => array(
      'label' => t('Append HTML'),
      'formitem' => array(
        '#type' => 'textarea',
        '#title' => t('HTML'),
        '#rows' => 4,
        '#required' => TRUE,
      ),
    ),
  );
  $types['prependHtml'] = array(
    'label' => t('Prepend HTML'),
    'needs_selector' => TRUE,
    'active' => TRUE,
    'contextual' => array(
      'label' => t('Prepend HTML'),
      'formitem' => array(
        '#type' => 'textarea',
        '#title' => t('HTML'),
        '#rows' => 4,
        '#required' => TRUE,
      ),
    ),
  );
  if (user_access('use advanced personalize elements features') || !$filter_by_perms) {
    $types['runJS'] = array(
      'label' => t('Run JavaScript code'),
      'needs_selector' => FALSE,
      'contextual' => FALSE,
      'active' => TRUE,
    );
  }
  return $types;
}

/**
 * Returns an option set to be used as part of a page variation.
 *
 * This could be an existing option set or one that needs to be created. If an option
 * set already exists for this agent using the given variation type and selector and
 * specifying the same page, then that option set will be used. Otherwise a new one
 * will be created.
 *
 * @param string $title
 *   The title to use for the option set if creating it from scratch.
 * @param string $agent_name
 *   The name of the agent the option set belongs to.
 * @param string $selector
 *   The selector to specified the element being personalized.
 * @param string $variation_type
 *   A valid variation type, e.g. 'appendHtml' or 'addClass'.
 * @param string $page
 *   The page that the variation pertains to.
 */
function personalize_elements_get_option_set_for_variation($title, $agent_name, $selector, $variation_type, $page) {
  $option_sets = personalize_option_set_load_multiple(FALSE, array('plugin' => 'elements', 'agent' => $agent_name));
  foreach ($option_sets as $option_set) {
    if ($option_set->data['personalize_elements_selector'] == $selector && $option_set->data['personalize_elements_type'] == $variation_type) {
      // We only use this option set if the pages property has not been set or
      // has been set to include this page.
      if (empty($option_set->data['pages']) || visitor_actions_match_page($option_set->data['pages'], $page)) {
        // Now constrain the pages property to just the variation page.
        $option_set->data['pages'] = $page;
        return $option_set;
      }
    }
  }
  $option_set = array(
    'label' => $title,
    'agent' => $agent_name,
    'plugin' => 'elements',
    'executor' => 'personalizeElements',
    'options' => array(),
    'data' => array(
      'personalize_elements_selector' => $selector,
      'personalize_elements_type' => $variation_type,
      'pages' => $page,
    )
  );
  return (object) $option_set;
}

/**
 * Generates an empty option to be included in a page variation.
 *
 * @param $option_id
 *   The id for the option
 * @param $option_label
 *   The label for the option
 * @return array
 *   An option array
 */
function personalize_elements_get_option_for_variation($option_id, $option_label) {
  $option = array(
    'option_id' => $option_id,
    'option_label' => $option_label,
  );
  return $option;
}

/**
 * Gets the variation types available for use within a contextual menu
 * specific to an element.
 */
function personalize_elements_contextual_menu_variations() {
  $variation_types = module_invoke_all('personalize_elements_variation_types');
  $options = array();
  foreach ($variation_types as $type => $info) {
    if ($info['contextual'] && $info['contextual'] !== FALSE) {
      $options[$type] = array(
        'name' => $info['contextual']['label'],
        'limitByChildrenType' => isset($info['limitByChildrenType']) ? $info['limitByChildrenType'] : '',
      );
    }
  }
  return $options;
}

/**
 * Loads a personalized element by its osid.
 *
 * @param $osid
 *   The osid of the option set.
 * @return The loaded option set or NULL if no option set of type
 *   'elements' exists with the given osid.
 */
function personalize_element_load($osid) {
  $os = personalize_option_set_load($osid);
  if (!$os || $os->plugin != 'elements') {
    return NULL;
  }
  return $os;
}
